import {Ident} from './idents';

/**
 * The kind of operation.
 */
export enum OpKind {

  /**
   * The insertion of a value.
   */
  Insert = 1,

  /**
   * The removal of a value.
   */
  Remove = 2,
}

/**
 * An operation that can be applied to a KSeq.
 */
export abstract class Op {

  /**
   * The kind of operation.
   */
  kind: OpKind

  /**
   * The name of the replica on which the operation was performed.
   */
  replica: string

  /**
   * A UNIX epoch timestamp for the wall time at which the operation was performed.
   * (Note: since this is generated by the local replica's clock, it is just an
   * approximation and should not be used to create a total order.)
   */
  timestamp: number

  /**
   * Creates an instance of Op.
   * @param kind      The kind of operation.
   * @param replica   The name of the replica on which the operation was performed.
   * @param timestamp A UNIX epoch timestamp for the wall time when the operation was performed.
   * @returns An instance of Op.
   */
  constructor(kind: OpKind, replica: string, timestamp: number) {
    this.kind = kind;
    this.replica = replica;
    this.timestamp = timestamp;
  }

  /**
   * Converts an encoded string to an Op of the correct type.
   * @param str The encoded string.
   * @returns An instance of the encoded Op.
   */
  static parse(str: string): Op {
    const kind = str[0];
    switch(kind) {
      case '+': return InsertOp.parse(str);
      case '-': return RemoveOp.parse(str);
    }
  }

  /**
   * Encodes the Op as a compact string representation.
   */
  abstract toString(): string;

}

/**
 * An operation that inserts an atom into the sequence with the specified
 * identifier and value.
 */
export class InsertOp extends Op {

  /**
   * The identifier for the value.
   */
  id: Ident

  /**
   * The value to insert.
   */
  value: any

  /**
   * Creates an instance of InsertOp.
   * @param replica   The name of the replica on which the operation was performed.
   * @param timestamp A UNIX epoch timestamp for the wall time when the operation was performed.
   * @param id        The identifier for the value.
   * @param value     The value to insert.
   * @returns An instance of InsertOp.
   */
  constructor(replica: string, timestamp: number, id: Ident, value: any) {
    super(OpKind.Insert, replica, timestamp)
    this.id = id;
    this.value = value;
  }

  /**
   * Converts an encoded string to an InsertOp.
   * @param str The encoded string.
   * @returns An instance of the encoded InsertOp.
   */
  static parse(str: string): InsertOp {
    let [timestamp, replica, id, value] = str.substr(1).split('/', 4);
    return new InsertOp(replica, Number(timestamp), Ident.parse(id), JSON.parse(value));
  }

  /**
   * @inheritdoc
   */
  toString() {
    return `+${this.timestamp}/${this.replica}/${this.id.toString()}/${JSON.stringify(this.value)}`;
  }

}

/**
 * An operation that removes an atom with the specified identifer.
 */
export class RemoveOp extends Op {

  /**
   * The identifier to remove.
   */
  id: Ident

  /**
   * Creates an instance of RemoveOp.
   * @param replica   The name of the replica on which the operation was performed.
   * @param timestamp A UNIX epoch timestamp for the wall time when the operation was performed.
   * @param id        The identifier of the atom to remove.
   * @returns An instance of RemoveOp.
   */
  constructor(replica: string, timestamp: number, id: Ident) {
    super(OpKind.Remove, replica, timestamp)
    this.id = id;
  }

  /**
   * Converts an encoded string to an RemoveOp.
   * @param str The encoded string.
   * @returns An instance of the encoded RemoveOp.
   */
  static parse(str: string): RemoveOp {
    let [timestamp, replica, id] = str.substr(1).split('/', 3);
    return new RemoveOp(replica, Number(timestamp), Ident.parse(id));
  }

  /**
   * @inheritdoc
   */
  toString() {
    return `-${this.timestamp}/${this.replica}/${this.id.toString()}`;
  }

}
